# encoding: utf-8
# -*- mode: ruby -*-
# vi: set ft=ruby :

### Prerequisite section
# We require a YAML library to attempt to load our default config
require 'yaml'

# Attempt to load the config file, fail gracefully otherwise
conf_file = "#{ENV['PWD']}/vagrant_config.yml"

vconf = YAML.load_file(conf_file)


### Main config section
Vagrant.configure(vconf['vagrant']['api_version']) do |config|

  config.vm.box = vconf['base']['box']
  config.vm.box_url = vconf['base']['box_url']
  config.vm.hostname = vconf['base']['hostname']
  config.omnibus.chef_version = vconf['chef']['chef_version']

  # Ensure we are provisioning with chef-solo and specify our cookbooks path
  config.vm.provision :chef_solo do |chef|

    chef.cookbooks_path = vconf['chef']['cookbooks_path']
    chef.json = {
         "rackspace_mysql" => {
           "server_root_password" => "131D404sWerTTdk1e1e",
           "server_repl_password" => "131D404sWerTTdk1e1e",
           "server_debian_password" => "131D404sWerTTdk1e1e"
         }
       }

    defined?(vconf['chef']['roles_path']) &&
      chef.roles_path = vconf['chef']['roles_path']

    defined?(vconf['chef']['data_bags_path']) &&
      chef.data_bags_path = vconf['chef']['data_bags_path']

    defined?(vconf['chef']['encrypted_data_bag_secret_key_path']) && 
      chef.encrypted_data_bag_secret_key_path = vconf['chef']['encrypted_data_bag_secret_key_path']

    defined?(vconf['chef']['role']) &&
      vconf['chef']['role'].each { |r| chef.add_role(r) }
  end

  ### VirtualBox provider settings
  config.vm.provider :virtualbox do |vbox|
    # Set the memory size and CPU count, also boot with GUI enabled
    vbox.customize [
                     'modifyvm', :id, '--memory',
                     vconf['virtualbox']['memsize']
                   ]
    vbox.customize [
                     'modifyvm', :id, '--cpus',
                     vconf['virtualbox']['cpu_count']
                   ]
    vbox.gui = true
    vbox.name = config.vm.hostname
  end

  ### VMware Fusion provider settings
  config.vm.provider :vmware_fusion do |fusion|
    # Set the memory size
    fusion.vmx['memsize'] = vconf['fusion']['memsize']
    fusion.vmx['numvcpus'] = vconf['fusion']['cpu_count']
    fusion.gui = true
  end

  ### RAX provider settings
  config.vm.provider :rackspace do |rs, override|
    override.vm.box = 'c0001'
    # Authentication creds, server details, etc.
    #  key_name is specified since attempting to inject public keys that are
    #  too large will result in a HTTP 413 response i.e. > ~800B (RAX limit)
    rs.username = vconf['rackspace']['username']
    rs.api_key = vconf['rackspace']['api_key']
    rs.rackspace_region = vconf['rackspace']['region']
    rs.server_name = config.vm.hostname
    rs.flavor = /#{vconf['rackspace']['flavor']}/
    rs.image = /#{vconf['rackspace']['image']}/
    rs.disk_config = vconf['rackspace']['disk_config']
    rs.public_key_path = vconf['ssh']['public_key_path']
    config.ssh.private_key_path = vconf['ssh']['private_key_path']
    config.ssh.pty = true
  end
end
